#include <cassert>
#include <cstdio>
#include <cstring>
#include <dlfcn.h>
#include <link.h>

#include "SignatureScanner.hpp"

void testByteSignatures()
{
#ifdef SIGNATURESCANNER_ENABLE_IDA_SEARCH
	unsigned char byte_array_hex[512u] = { 0x68, 0x74, 0x16, 0xcd, 0xaa, 0xe3, 0x6, 0x95, 0xcb, 0xeb, 0xe7, 0x64, 0x1e, 0xbb, 0x5a, 0xf2, 0x65, 0xe5, 0x53, 0x85, 0xb8, 0xfe, 0xb4, 0x3f, 0xb4, 0x38, 0x3a, 0x1a, 0xc4, 0x5f, 0x5e, 0x35, 0xe7, 0xd4, 0x3d, 0xb3, 0x51, 0x98, 0xa7, 0x66, 0x1d, 0xe4, 0xff, 0x9a, 0x63, 0xa, 0x37, 0x6f, 0xd, 0x24, 0xa9, 0x5c, 0x19, 0xb9, 0xa1, 0xfb, 0x91, 0x73, 0xd7, 0x3d, 0xc, 0x9b, 0xb, 0xac, 0xd2, 0x49, 0x98, 0x2d, 0x8, 0x29, 0xb6, 0xf0, 0x43, 0xe4, 0x7, 0x5, 0xfa, 0x30, 0x81, 0xc9, 0xad, 0xaf, 0x7c, 0x8, 0xee, 0xca, 0xdf, 0xdb, 0x2c, 0x76, 0xa9, 0x49, 0xb8, 0xf5, 0xcd, 0x4d, 0xa9, 0x14, 0xc0, 0xaf, 0xc5, 0x7, 0xde, 0x5f, 0x3, 0x48, 0x71, 0x74, 0x71, 0x4c, 0x80, 0x5b, 0xb0, 0x74, 0x4f, 0x4b, 0xbc, 0x66, 0xc0, 0xe4, 0x88, 0xc6, 0x65, 0xcd, 0x69, 0x43, 0x99, 0xe4, 0x97, 0xfd, 0x34, 0xfc, 0x38, 0xac, 0x41, 0x85, 0x9d, 0xc7, 0x83, 0xfa, 0xd3, 0x3e, 0xc7, 0x1c, 0xab, 0xf5, 0x6a, 0xc, 0x8e, 0xcb, 0x34, 0x72, 0xaa, 0xa, 0xeb, 0x59, 0x17, 0x29, 0x29, 0x57, 0x82, 0xa2, 0x8d, 0x9e, 0xc0, 0x40, 0x33, 0x5b, 0x61, 0x12, 0x2f, 0x1, 0x14, 0xcb, 0x99, 0x86, 0x72, 0x6e, 0xfc, 0x67, 0x6f, 0x8a, 0x2c, 0xe5, 0x84, 0x66, 0xf6, 0xc3, 0x2d, 0x33, 0x36, 0xcc, 0x87, 0x98, 0x60, 0x27, 0x68, 0xba, 0x18, 0x90, 0xc5, 0xbf, 0xd8, 0xf9, 0xa5, 0xca, 0x99, 0xe2, 0x27, 0xc1, 0xe2, 0xfc, 0xff, 0x73, 0x12, 0x37, 0xca, 0x91, 0xde, 0x3c, 0xd9, 0x6, 0xf, 0xdd, 0xa7, 0x55, 0x19, 0x32, 0x1a, 0x98, 0xba, 0x2b, 0xc7, 0x12, 0xf2, 0xe5, 0xe8, 0xbe, 0xfa, 0xa9, 0x98, 0x30, 0xf0, 0x57, 0xa0, 0xfb, 0xa9, 0xb1, 0x63, 0x62, 0x10, 0x22, 0xb7, 0x39, 0x8c, 0x76, 0xe3, 0x71, 0x53, 0x23, 0x59, 0x88, 0xa4, 0x9b, 0xbc, 0x5, 0x2b, 0x2d, 0x50, 0x5b, 0x43, 0x9a, 0xd1, 0x40, 0x91, 0xd7, 0x38, 0x64, 0xab, 0x4b, 0xf5, 0xad, 0x42, 0x74, 0x58, 0xe4, 0xca, 0xe5, 0xf0, 0xab, 0x5e, 0x50, 0xbc, 0x27, 0x5e, 0x4e, 0xb7, 0x41, 0x92, 0xb0, 0x82, 0x44, 0xab, 0x6f, 0x65, 0x24, 0xd9, 0xc4, 0xe3, 0x51, 0x8d, 0x8d, 0x2f, 0x9c, 0x76, 0x62, 0x2d, 0x3b, 0xab, 0x21, 0xf4, 0xdb, 0xa2, 0x12, 0xca, 0xcc, 0x3e, 0x9b, 0xbd, 0xcb, 0x75, 0xf5, 0x77, 0xde, 0x1b, 0xbb, 0xe0, 0x31, 0x3f, 0x6d, 0x82, 0x3a, 0xfc, 0x5d, 0x4, 0xd0, 0x3c, 0xab, 0xf6, 0x7c, 0xfa, 0x1a, 0x23, 0xe2, 0x4d, 0x6d, 0x56, 0xd3, 0xf5, 0xf4, 0x46, 0xce, 0xd6, 0x27, 0xc1, 0x23, 0x49, 0xec, 0xdb, 0x85, 0x4d, 0xa4, 0x12, 0x4a, 0xd6, 0xb8, 0x6a, 0xc9, 0x60, 0xa7, 0x6b, 0xc0, 0xcd, 0x8d, 0xa1, 0xa5, 0x9c, 0xf, 0x42, 0x7d, 0xc8, 0x40, 0x3b, 0xc9, 0x8b, 0x85, 0xfc, 0xde, 0x15, 0xd5, 0x6e, 0xcd, 0x8d, 0xc1, 0x44, 0x5a, 0x13, 0x70, 0x37, 0x2, 0xb1, 0xf2, 0xff, 0x56, 0x29, 0xa3, 0x95, 0xa4, 0x69, 0xa, 0x9d, 0x77, 0x53, 0x32, 0x7f, 0x97, 0x3f, 0x6e, 0x97, 0x7a, 0xf3, 0x8e, 0xec, 0x12, 0x80, 0x35, 0x26, 0x6b, 0xe4, 0x1b, 0xda, 0x75, 0x6c, 0x6f, 0x5b, 0x57, 0x29, 0x33, 0xc0, 0x2b, 0x5f, 0xa4, 0x97, 0xe5, 0x27, 0xdb, 0xf5, 0xfe, 0x77, 0xd6, 0xd7, 0x0, 0xe8, 0xf7, 0x73, 0x9f, 0xcc, 0x63, 0xf2, 0x0, 0x16, 0x35, 0xc2, 0xa, 0x71, 0x96, 0x8d, 0x82, 0x5e, 0xa7, 0x44, 0xad, 0x94, 0x37, 0x3a, 0xcd, 0xc8, 0x3a, 0xe7, 0xa2, 0x96, 0xf9, 0xf3, 0xca, 0xb2, 0xa2, 0x63, 0x8d, 0xf1, 0x64, 0x13, 0xa7, 0xa, 0x81, 0x8a, 0xa2, 0xa, 0x5e, 0x11, 0x5c, 0x81, 0xea };
	auto signature = SignatureScanner::ByteSignature("ab f6 7c fa ?? 23 e2 4d 6d ?? d3 f5 f4 46 ce ?? 27 c1 23 49 ec db 85");

	void* hit = signature.findNext<void*>(byte_array_hex, byte_array_hex + sizeof(byte_array_hex));

	size_t offset = reinterpret_cast<unsigned char*>(hit) - byte_array_hex;

	printf("Offset: %ld\n", offset);

	assert(offset == 347);

	signature = SignatureScanner::ByteSignature("87 98 60 27 ?? ?? 18 90 c5");

	hit = signature.findPrev<void*>(hit, byte_array_hex);

	offset = reinterpret_cast<unsigned char*>(hit) - byte_array_hex;
	printf("Offset: %ld\n", offset);

	assert(offset == 192);

	std::vector<void*> hits = SignatureScanner::ByteSignature("5a").findAll<void*>(byte_array_hex, byte_array_hex + sizeof(byte_array_hex));

	printf("0x5A has %zu hits\n", hits.size());
	assert(hits.size() == 2);
#endif
}

const char* testStringSignatures(void* baseAddress)
{
#ifdef SIGNATURESCANNER_ENABLE_STRING_SEARCH
	const char* string = "We are looking for this string in our .rodata";
	auto signature = SignatureScanner::StringSignature(strdup(string));
	const char* string2 = signature.findNext<const char*>(baseAddress);
	printf("'%s' = '%s'\n", string, string2);

	assert(string == string2); // Have we found the original?
#else
	const char* string2 = "We are looking for this string in our .rodata";
#endif

	return string2;
}

void testXRefSignatures(void* baseAddress, const char* string)
{
#ifdef SIGNATURESCANNER_ENABLE_XREF_SEARCH
	SignatureScanner::XRefSignature xrefSignature(string);
	void* addr = xrefSignature.findNext<void*>(baseAddress);
	Dl_info dlInfo;
	int dlAddr = dladdr(addr, &dlInfo);
	assert(dlAddr != 0);
	printf("I found the string inside the following method: %s\n", dlInfo.dli_sname);
	assert(strcmp(dlInfo.dli_sname, "_Z20testStringSignaturesPv") == 0);
#endif
}

int main()
{
	void* handle = dlopen(nullptr, RTLD_GLOBAL | RTLD_NOW);
	link_map* linkMap;
	dlinfo(handle, RTLD_DI_LINKMAP, &linkMap);
	dlclose(handle);

	testByteSignatures();
	const char* addr = testStringSignatures(reinterpret_cast<void*>(linkMap->l_addr));
	testXRefSignatures(reinterpret_cast<void*>(linkMap->l_addr), addr);

	return 0;
}
